apply plugin: 'java'
apply plugin: 'idea'

// Keep Java source compatibility at 1.7
sourceCompatibility = JavaVersion.VERSION_1_7

version = '1.0'
ext.kettle_dependency_revision = '5.2.0.0-209'

// This adds the Pentaho repositories and Maven Central.
repositories {
  maven {
    url 'http://nexus.pentaho.org/content/groups/omni/'
  }
  maven {
    url 'http://repo.pentaho.org/artifactory/repo'
  }
  ivy {
    url "http://repo.pentaho.org/artifactory/repo/"
    layout "pattern", {
      ivy "[organisation]/[module]/[revision]/[module]-[revision].ivy.xml"
      artifact "[organisation]/[module]/[revision]/[module]-[revision].jar"
      m2compatible = true
    }
  }
  mavenCentral()
  mavenLocal()
}

configurations {
  provided
  compile {
    extendsFrom provided
  }

  zip
}


dependencies {
  // Put compile-time dependencies here. This will include anything that Kettle provides that you
  // do not need to override, and usually includes kettle-core, kettle-engine, kettle-ui-swt, and metastore
  provided("pentaho-kettle:kettle-core:${project.ext.kettle_dependency_revision}")
  provided("pentaho-kettle:kettle-engine:${project.ext.kettle_dependency_revision}")
  provided("pentaho-kettle:kettle-ui-swt:${project.ext.kettle_dependency_revision}")
  provided("pentaho:metastore:${project.ext.kettle_dependency_revision}")
  provided("org.eclipse.swt:swt-linux-x86_64:4.3.2")
  // Put runtime dependencies here using the runtime() directive. Example:

  // Put runtime overrides of compile-time dependencies here. Often this will include the runtime() dependencies plus
  // any overrides of JARs in the normal Kettle classloader. Example:
  compile fileTree(dir: 'lib-dist', include: '*.jar')

  testCompile 'junit:junit:4.10'
}

// This task builds a PDI plugin in the correct format, a ZIP with the plugin JAR at the root and a lib/ folder containing
// all third-party dependencies
task plugin(dependsOn: jar, type: Zip) {
  into("${project.name}/") {
    from jar.outputs.files
    from fileTree(dir: 'package-res')
  }

  // The list of JARs in the lib/ folder is the complement of the intersection of the compile and runtime dependencies,
  // plus the JARs in the runtimeWithoutCompile config
  // The list of JARs in the lib/ folder is the complement of the intersection of the compile and runtime dependencies,
  // plus the JARs in the runtimeWithoutCompile config
  def compileDeps = configurations.compile.resolve()
  def providedDeps = configurations.provided.resolve()
  def leftovers = compileDeps - providedDeps
  into("${project.name}/lib") {
    from leftovers
  }
}

artifacts {
  zip plugin
}

task createGradleWrapper(type: Wrapper) {
  gradleVersion = '2.1'
}
